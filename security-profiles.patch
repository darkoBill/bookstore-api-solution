From 99ae3c1e6b8429a5255420676e6c756fc845ab2a Mon Sep 17 00:00:00 2001
From: Darko <43810203+darkoBill@users.noreply.github.com>
Date: Sun, 24 Aug 2025 19:53:28 +0200
Subject: [PATCH] Document security profile selection

---
 README.md                                     | 21 ++++--
 scripts/run-local.ps1                         |  2 +-
 scripts/run-local.sh                          |  2 +-
 .../bookstore/config/JwtSecurityConfig.java   |  2 +-
 .../bookstore/security/SecurityConfig.java    |  2 +
 .../integration/BookConcurrentUpdateTest.java |  2 +
 .../BookControllerIntegrationTest.java        |  2 +
 .../JwtSecurityIntegrationTest.java           | 69 +++++++++++++++++++
 ...java => SecurityBasicIntegrationTest.java} | 16 ++++-
 9 files changed, 109 insertions(+), 9 deletions(-)
 create mode 100644 src/test/java/com/bookstore/integration/JwtSecurityIntegrationTest.java
 rename src/test/java/com/bookstore/integration/{SecurityIntegrationTest.java => SecurityBasicIntegrationTest.java} (77%)

diff --git a/README.md b/README.md
index 09f252d..20aadbe 100644
--- a/README.md
+++ b/README.md
@@ -44,9 +44,12 @@ Many-to-many relationships between Books, Authors, and Genres via join tables. T
 ## Security Model
 
 ### Authentication & Authorization
-- **HTTP Basic Auth**: Industry standard, simple to implement and test (assumes TLS in production)
+- **Security Profiles**:
+  - `basic`: HTTP Basic authentication with environment-configurable users
+  - `jwt`: JWT-based authentication with a login endpoint and Bearer tokens
+  Activate one by setting `spring.profiles.active` (e.g., `--spring.profiles.active=local,basic`). Only one security profile should be active at a time.
 - **Environment-Configurable Users**: Credentials sourced from environment variables
-- **Role-Based Access Control**: 
+- **Role-Based Access Control**:
   - `ADMIN`: Full CRUD operations on all resources
   - `USER`: Read and search operations only
 
@@ -78,6 +81,7 @@ export ADMIN_USERNAME=admin
 export ADMIN_PASSWORD=admin123
 export USER_USERNAME=user
 export USER_PASSWORD=user123
+export SPRING_PROFILES_ACTIVE=jwt # or "basic"
 
 # Start everything with Docker Compose
 docker compose up --build
@@ -97,6 +101,8 @@ $env:ADMIN_USERNAME="admin"
 $env:ADMIN_PASSWORD="admin123"
 $env:USER_USERNAME="user"
 $env:USER_PASSWORD="user123"
+$env:SPRING_PROFILES_ACTIVE="local,basic" # or "local,jwt"
+$env:SPRING_PROFILES_ACTIVE="jwt" # or "basic"
 
 # Start everything with Docker Compose
 docker compose up --build
@@ -118,12 +124,13 @@ export ADMIN_USERNAME=admin
 export ADMIN_PASSWORD=admin123
 export USER_USERNAME=user
 export USER_PASSWORD=user123
+export SPRING_PROFILES_ACTIVE=local,basic # or local,jwt
 
 # Run application locally using convenience script
 ./scripts/run-local.sh
 
 # Or manually with Gradle
-./gradlew bootRun --args='--spring.profiles.active=local'
+./gradlew bootRun --args='--spring.profiles.active=local,basic'
 
 # Stop database when done
 ./scripts/stop-local.sh
@@ -141,12 +148,13 @@ $env:ADMIN_USERNAME="admin"
 $env:ADMIN_PASSWORD="admin123"
 $env:USER_USERNAME="user"
 $env:USER_PASSWORD="user123"
+$env:SPRING_PROFILES_ACTIVE="local,basic" # or "local,jwt"
 
 # Run application locally using convenience script
 .\scripts\run-local.ps1
 
 # Or manually with Gradle
-.\gradlew.bat bootRun --args="--spring.profiles.active=local"
+.\gradlew.bat bootRun --args="--spring.profiles.active=local,basic"
 
 # Stop database when done
 docker compose -f docker-compose.dev.yml down
@@ -194,7 +202,10 @@ docker compose -f docker-compose.dev.yml down
 - **Health Check**: `/actuator/health`
 
 ### Authentication
-The API uses JWT (JSON Web Token) authentication with RSA-256 signing:
+Depending on the active security profile:
+
+- `basic`: send credentials using the `Authorization: Basic` header
+- `jwt`: use JWT (JSON Web Token) authentication with RSA-256 signing:
 
 ```bash
 # 1. Obtain JWT token via login
diff --git a/scripts/run-local.ps1 b/scripts/run-local.ps1
index 90378cc..021c28a 100644
--- a/scripts/run-local.ps1
+++ b/scripts/run-local.ps1
@@ -41,4 +41,4 @@ Write-Host ""
 Write-Host "Press Ctrl+C to stop the application"
 Write-Host ""
 
-./gradlew.bat bootRun --args='--spring.profiles.active=local'
\ No newline at end of file
+./gradlew.bat bootRun --args='--spring.profiles.active=local,basic'
\ No newline at end of file
diff --git a/scripts/run-local.sh b/scripts/run-local.sh
index ef09133..45b9775 100755
--- a/scripts/run-local.sh
+++ b/scripts/run-local.sh
@@ -42,4 +42,4 @@ echo ""
 echo "Press Ctrl+C to stop the application"
 echo ""
 
-./gradlew bootRun --args='--spring.profiles.active=local'
\ No newline at end of file
+./gradlew bootRun --args='--spring.profiles.active=local,basic'
\ No newline at end of file
diff --git a/src/main/java/com/bookstore/config/JwtSecurityConfig.java b/src/main/java/com/bookstore/config/JwtSecurityConfig.java
index 4516a99..a936dd9 100644
--- a/src/main/java/com/bookstore/config/JwtSecurityConfig.java
+++ b/src/main/java/com/bookstore/config/JwtSecurityConfig.java
@@ -36,7 +36,7 @@ import java.util.UUID;
 @EnableWebSecurity
 @EnableMethodSecurity(prePostEnabled = true)
 @Slf4j
-@Profile("!test")
+@Profile("jwt")
 public class JwtSecurityConfig {
 
     @Bean
diff --git a/src/main/java/com/bookstore/security/SecurityConfig.java b/src/main/java/com/bookstore/security/SecurityConfig.java
index 997f011..f963c31 100644
--- a/src/main/java/com/bookstore/security/SecurityConfig.java
+++ b/src/main/java/com/bookstore/security/SecurityConfig.java
@@ -3,6 +3,7 @@ package com.bookstore.security;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Profile;
 import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
@@ -21,6 +22,7 @@ import static org.springframework.security.config.Customizer.withDefaults;
 @Configuration
 @EnableWebSecurity
 @EnableMethodSecurity
+@Profile("basic")
 public class SecurityConfig {
     
     @Value("${app.security.admin.username}")
diff --git a/src/test/java/com/bookstore/integration/BookConcurrentUpdateTest.java b/src/test/java/com/bookstore/integration/BookConcurrentUpdateTest.java
index 119d98f..5feaa5b 100644
--- a/src/test/java/com/bookstore/integration/BookConcurrentUpdateTest.java
+++ b/src/test/java/com/bookstore/integration/BookConcurrentUpdateTest.java
@@ -4,6 +4,7 @@ import com.bookstore.dto.BookDto;
 import com.bookstore.service.BookService;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.ActiveProfiles;
 
 import java.math.BigDecimal;
 import java.util.List;
@@ -18,6 +19,7 @@ import java.util.concurrent.TimeUnit;
 
 import static org.junit.jupiter.api.Assertions.*;
 
+@ActiveProfiles("basic")
 class BookConcurrentUpdateTest extends BaseIntegrationTest {
 
     @Autowired
diff --git a/src/test/java/com/bookstore/integration/BookControllerIntegrationTest.java b/src/test/java/com/bookstore/integration/BookControllerIntegrationTest.java
index 85a8ec0..0e6e652 100644
--- a/src/test/java/com/bookstore/integration/BookControllerIntegrationTest.java
+++ b/src/test/java/com/bookstore/integration/BookControllerIntegrationTest.java
@@ -15,6 +15,7 @@ import org.springframework.http.MediaType;
 import org.springframework.security.test.context.support.WithMockUser;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.transaction.annotation.Transactional;
+import org.springframework.test.context.ActiveProfiles;
 
 import java.math.BigDecimal;
 import java.util.Set;
@@ -27,6 +28,7 @@ import static org.springframework.test.web.servlet.request.MockMvcRequestBuilder
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 
 @Transactional
+@ActiveProfiles("basic")
 class BookControllerIntegrationTest extends BaseIntegrationTest {
     
     @Autowired
diff --git a/src/test/java/com/bookstore/integration/JwtSecurityIntegrationTest.java b/src/test/java/com/bookstore/integration/JwtSecurityIntegrationTest.java
new file mode 100644
index 0000000..189fb56
--- /dev/null
+++ b/src/test/java/com/bookstore/integration/JwtSecurityIntegrationTest.java
@@ -0,0 +1,69 @@
+package com.bookstore.integration;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.MediaType;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.web.servlet.MockMvc;
+
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@ActiveProfiles("jwt")
+class JwtSecurityIntegrationTest extends BaseIntegrationTest {
+
+    @Autowired
+    private MockMvc mockMvc;
+
+    @Autowired
+    private ObjectMapper objectMapper;
+
+    @Autowired
+    private List<SecurityFilterChain> securityFilterChains;
+
+    @Test
+    void loginAndAccessProtectedEndpoint_WithValidCredentials_ShouldReturn200() throws Exception {
+        String token = obtainAccessToken("admin", "admin123");
+
+        mockMvc.perform(get("/api/books")
+                .header("Authorization", "Bearer " + token))
+            .andExpect(status().isOk());
+    }
+
+    @Test
+    void accessProtectedEndpoint_WithoutToken_ShouldReturn401() throws Exception {
+        mockMvc.perform(get("/api/books"))
+            .andExpect(status().isUnauthorized());
+    }
+
+    @Test
+    void login_WithInvalidCredentials_ShouldReturn401() throws Exception {
+        mockMvc.perform(post("/api/auth/login")
+                .contentType(MediaType.APPLICATION_JSON)
+                .content("{\"username\":\"admin\",\"password\":\"wrong\"}"))
+            .andExpect(status().isUnauthorized());
+    }
+
+    @Test
+    void shouldOnlyHaveOneSecurityFilterChain() {
+        assertEquals(1, securityFilterChains.size(), "Only one SecurityFilterChain should be active");
+    }
+
+    private String obtainAccessToken(String username, String password) throws Exception {
+        String response = mockMvc.perform(post("/api/auth/login")
+                .contentType(MediaType.APPLICATION_JSON)
+                .content("{\"username\":\"" + username + "\",\"password\":\"" + password + "\"}"))
+            .andExpect(status().isOk())
+            .andReturn()
+            .getResponse()
+            .getContentAsString();
+
+        return objectMapper.readTree(response).get("accessToken").asText();
+    }
+}
diff --git a/src/test/java/com/bookstore/integration/SecurityIntegrationTest.java b/src/test/java/com/bookstore/integration/SecurityBasicIntegrationTest.java
similarity index 77%
rename from src/test/java/com/bookstore/integration/SecurityIntegrationTest.java
rename to src/test/java/com/bookstore/integration/SecurityBasicIntegrationTest.java
index 86808a3..b2f83f1 100644
--- a/src/test/java/com/bookstore/integration/SecurityIntegrationTest.java
+++ b/src/test/java/com/bookstore/integration/SecurityBasicIntegrationTest.java
@@ -2,16 +2,25 @@ package com.bookstore.integration;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.web.servlet.MockMvc;
 
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.httpBasic;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-class SecurityIntegrationTest extends BaseIntegrationTest {
+@ActiveProfiles("basic")
+class SecurityBasicIntegrationTest extends BaseIntegrationTest {
     
     @Autowired
     private MockMvc mockMvc;
+
+    @Autowired
+    private List<SecurityFilterChain> securityFilterChains;
     
     @Test
     void accessProtectedEndpoint_WithValidAdminCredentials_ShouldReturn200() throws Exception {
@@ -51,4 +60,9 @@ class SecurityIntegrationTest extends BaseIntegrationTest {
         mockMvc.perform(get("/v3/api-docs"))
             .andExpect(status().isOk());
     }
+
+    @Test
+    void shouldOnlyHaveOneSecurityFilterChain() {
+        assertEquals(1, securityFilterChains.size(), "Only one SecurityFilterChain should be active");
+    }
 }
\ No newline at end of file
-- 
2.43.0

